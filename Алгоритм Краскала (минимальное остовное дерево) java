import java.util.*;

class KruskalExample {
    // Класс для представления ребра
    static class Edge implements Comparable<Edge> {
        int u, v, weight;
        Edge(int u, int v, int weight) {
            this.u = u; this.v = v; this.weight = weight;
        }
        public int compareTo(Edge other) {
            return Integer.compare(this.weight, other.weight); // сортировка по весу
        }
    }

    // Поиск сжатия путей (DSU)
    static int find(int[] parent, int x) {
        if (parent[x] != x) parent[x] = find(parent, parent[x]);
        return parent[x];
    }

    // Объединение множеств
    static void union(int[] parent, int a, int b) {
        a = find(parent, a);
        b = find(parent, b);
        if (a != b) parent[a] = b;
    }

    public static void main(String[] args) {
        int n = 4; // количество вершин
        List<Edge> edges = new ArrayList<>();
        // добавляем рёбра
        edges.add(new Edge(0, 1, 10));
        edges.add(new Edge(0, 2, 6));
        edges.add(new Edge(0, 3, 5));
        edges.add(new Edge(1, 3, 15));
        edges.add(new Edge(2, 3, 4));

        Collections.sort(edges); // сортируем рёбра по весу

        int[] parent = new int[n];
        for (int i = 0; i < n; i++) parent[i] = i; // инициализация DSU

        int mstWeight = 0;
        System.out.println("Ребра в минимальном остовном дереве:");
        for (Edge e : edges) {
            if (find(parent, e.u) != find(parent, e.v)) {
                union(parent, e.u, e.v); // объединяем множества
                mstWeight += e.weight;
                System.out.println(e.u + " - " + e.v + " : " + e.weight);
            }
        }
        System.out.println("Общий вес MST = " + mstWeight);
    }
}
